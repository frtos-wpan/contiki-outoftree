ifndef CONTIKI
  $(error CONTIKI not defined! You must specify where CONTIKI resides!)
endif

FREERTOS = $(shell pwd)/../freertos
# the items below should come from FreeRTOS (if we kick off the build from
# there)
FREERTOS_TARGET = $(FREERTOS)/FreeRTOS/Demo/E407
FREERTOS_PORTABLE = $(FREERTOS)/FreeRTOS/Source/portable/GCC/ARM_CM4F

ifeq ($(UIP_CONF_IPV6),1)
CFLAGS += -DWITH_UIP6=1
endif

CONTIKI_TARGET_DIRS = . dev
CONTIKI_TARGET_MAIN = ${addprefix $(OBJECTDIR)/,contiki-main.o}

CONTIKI_TARGET_SOURCEFILES = contiki-main.c clock.c irq.c leds.c

CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

.SUFFIXES:

#####  STM32F407  #############################################################

# Seems to be application-specific, but let's have it here anyway
CFLAGS+=-DAUTOSTART_ENABLE

ARCH_FLAGS = -mcpu=cortex-m4 -mthumb -march=armv7e-m \
             -mfloat-abi=hard -mfpu=fpv4-sp-d16

# ----- Makefile.stm32-ocm3 ---------------------------------------------------

# Adapted from Makefile.stm32f103
# This makefile should work for any chip supported by libopencm3,
# but is particularly known to work for stm32f107 and l151

### Code common for all ARM CPUs

CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm
CONTIKI_CPU_ARM_COMMON=$(CONTIKI_CPU_ARM)/common

### CPU-dependent cleanup files
CLEAN += symbols.c symbols.h *.d *.elf

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI_CPU_ARM)/stm32-ocm3

### Define the source files we have in this port

CONTIKI_CPU_DIRS = .

TARGETLIBS = random.c

CONTIKI_TARGET_SOURCEFILES += $(STM32OCM3) $(TARGETLIBS)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

PREFIX = arm-none-eabi

### Compiler definitions
CC       = $(PREFIX)-gcc
AS       = $(PREFIX)-as
AR       = $(PREFIX)-ar
NM       = $(PREFIX)-nm
OBJCOPY  = $(PREFIX)-objcopy
STRIP    = $(PREFIX)-strip

XSLTPROC=xsltproc

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

# DFU-UTIL program upload
DFU_UTIL=dfu-util
DFU_UTIL_OFFSET=0x08000000

# Use dfu-util by default
PROG=dfuutil

ifndef ARCH_FLAGS
$(warning defaulting ARCH_FLAGS to cortex M3, hope that is what you wanted!)
ARCH_FLAGS = -mcpu=cortex-m3 -mthumb
endif


#CONTIKI_CFLAGS = -DWITH_UIP -DWITH_ASCII

CFLAGSNO = -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) \
           -I$(CONTIKI)/platform/$(TARGET) \
           ${addprefix -I,$(APPDIRS)} \
           -DSUBTARGET=$(SUBTARGET) \
           -Wall $(ARCH_FLAGS) -ggdb3 -MD

CFLAGS  += $(CONTIKI_CFLAGS) $(CFLAGSNO) -Os

LDFLAGS = $(error FreeRTOS build does not produce executable)

CDEPFLAGS = $(CFLAGS) -D __MAKING_DEPS__

### Setup directory search path for source files


CUSTOM_RULE_S_TO_OBJECTDIR_O = yes
%.o: %.S
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.S
	$(CC) $(CFLAGS) $< -c  -o $@


CUSTOM_RULE_LINK=yes

%-stripped.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -g -x -o $@ $<

%.o: ${CONTIKI_TARGET}/loader/%.S
	$(AS) -o $(notdir $(<:.S=.o)) $<


.PHONY: symbols.c
ifdef CORE
symbols.c: $(CORE)
	$(NM) $< | awk -f $(CONTIKI_CPU)/builtins.awk -f ../../tools/mknmlist > symbols.c

endif

empty-symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h

# Don't use core/loader/elfloader.c, use elfloader-otf.c instead
$(OBJECTDIR)/elfloader.o:
	echo -n >$@

clean: clean_cpu

clean_cpu:
	-rm -rf $(BUILTSRCDIR)

# -----------------------------------------------------------------------------

STM32OCM3 = clock.c

#####  End STM32F407  #########################################################

### Define the CPU directory
CONTIKI_CPU=./cpu/freertos
include $(CONTIKI_CPU)/Makefile.freertos

CFLAGS += -I$(FREERTOS)/FreeRTOS/Source/include \
	  -Iplatform/freertos/wrapper \
	  -I$(FREERTOS_TARGET) \
	  -I$(FREERTOS_PORTABLE)
